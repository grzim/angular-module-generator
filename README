Overview:

This is a set of two scripts (+ configuration) that help to create and mange a well structured angular application.

init.js
- creates a main module, to which future modules will be added
- creates a index.tpl.html ready to work with a very useful grunt task 'init source'

create.js:
- creates a set of module-controller-directive-template-css_preprocessor-dictionary for a defined component in a root directory or (when specified) in a parent-component directory
- all the paths inside files are updated relative to the parent component/root folder
- inserts all newly creates js'es into index.html (with the help of grunts init source)
- basically handles all the arduous work connected to creation of a neat and clear angular file structure

_____________________________________
Background:

JavaScript is a language that, when not used wisely, can lead to endless spaghetti code, with no beginning, no end, no meatballs. Thankfully there are frameworks thanks to which it is far easier to keep code neat and make a file structure intuitive. Sadly ‘far easier’ still doesn’t mean that it is simple and doesn’t need to make an investigation about how to squeeze the best from the framework.

When it comes to Angular the easiest possible pattern of keeping code fairly neat is to make separate folders for directives, controllers, filters, services and views. Meaning - when we have i.e. 3 controllers, there will be 3 separate files all stored under folder named controllers. This pattern works well but only for small or very small projects. As soon as project grows and start to consist more components, suddenly it becomes super-complicated and it is difficult to maintain a clear structure of a project.

Thankfully we can use the magnificent modular pattern that will simplify the architecture dramatically. The main goal of such a pattern is to create a separate module for every component. The module is registered to the main application module, as one of dependencies, just like external, 3rd party, angular modules. This new module and all of the logic connected to it should be placed in the separate folder, what makes the project structure far more intuitive.

With the few improvements to the classical modular pattern we can make a structure that allows to get a very quick overview about the components functionality just by a short glimpse on the file structure. All we need is to follow some simple rules.
First of all, one module should consist of only one controller, one directive and one html template. All of them should be defined inside a directive. Controller, directive and template html should be stored in separate files. What is more we should store also compile and link function (if such exist in a component) in a separate file. Such an attitude improve the clarity of the file structure.
Just by opening a folder it is clear if there are link and compile function, we have all of the logic in one place and we are forced to create elements that have a single logical responsibility as the module can consist only of one controller/directive/template.
Imagine we are using a version control and somebody is changing a file. In a traditional module pattern, when somebody has changed a directive we would have to investigate which part of directive has been changed (link function? compile function? name of an html template?), on the other hand when we have all the functions represents different part of logic in separate files it i far easier to understand what has been changed - the filename speaks of itself.

In order not to use global naming it is always wise to use namespaces.
The example of using namespaces, directives with the functional separation and link function is shown below:

mainModule:

var myNamespace = {};

(function(namespace){
   var projectModules = {
       externalModules: [
       ],
       internalModules: [
       ],
       get: function () {
           'use strict';
           return this.externalModules.concat(this.internalModules);
       }
   };
   namespace.app = angular.module(myApp', projectModules.get());
})(myNamespace)

Thanks to such an approach we have functions that are only visible in the provided namespace. In one namespace we can have more than one angular module if needed.
In mainModule there is a clear separation between the modules from within application and the 3rd party modules.



A directive:

namespace.myApp.sampleComponent.directive('myComponent', function(){
   'use strict';
   var template = 'src/scripts/componentsTemplate.html';
   return {
       restrict:'AE',
       controller:'componentsCtrl',
       templateUrl: template,
       compile: namespace.myApp.sampleComponent.compileFunction
   };

});

A compile function:

namespace.myApp.sampleComponent.compileFunction = function(){
    return namespace.myApp.sampleComponent.linkFunction.bind(this);
}

A link function:

namespace.myApp.sampleComponent.linkFunction = function(){

}

Thanks to binding compileFunction's this to the linkFunction we are not loosing a scope, so that we can make a shared property (inside an object that a directive returns), in order to maintain a communication between all functions.
Looks like a lot of work to do in order to maintain such a structure, isn’t it? Create all of separate files, then add them into index.html, have in mind all of the relative paths of template.htmls, css prepocessors, dictionaries…
In order to ease the work I have made this script.


_____________________________
Usage:


Module generator is a tool for an automatic generation of files and assertion to html.


In order to create main module and index.html edit generationConfigs.js and then run:

node init

In order to run the generator type in terminal:

node create [componentsName] [parentElement (optional)]

after pressing enter you will see the structure of created files in terminal:

i.e. executing
node create component
will give an output:
in src/scripts/component
---------> componentCtrl.js
---------> componentDrtv.js
---------> componentMdl.js
---------> i18n
--------------> en.json
--------------> pl.json
---------> styles
-------------->component.less
---------> component.html
---------> tests
--------------> componentCtrl.test.js
--------------> componentDrtv.test.js

what means that all of those files were generated and inserted to index.html

When you define a parent element the component will be automatically moved to the correct folder with all of the references in files updated.

The code inside files looks as follows:

componentMdl.js
app.component = angular.module('componentModule', [])
.config(['$translatePartialLoaderProvider', function ($translatePartialLoaderProvider) {
  'use strict';
  $translatePartialLoaderProvider.addPart('component');
}]);

componentCtrl.js
app.component.controller('componentCtrl', function($scope){
  'use strict';
});

componentDrtv.js
app.component.directive('component', function(){
  'use strict';
  var template = 'src/scripts/component/component.html';
  return {
     restrict:'AE',
     controller:'componentCtrl',
      templateUrl: template,
      compile: function(elem){
        elem.attr('templateurl', template);
     }
  };
});

componentCtrl.test.js
describe('componentCtrl has no tests implemented yet', function(){
"use strict";
});

componentDrtv.test.js
describe('componentDrtv has no tests implemented yet', function(){
"use strict";
});

component.less
@import "../../../styles/base";

#componentComponent{
}

Generated module will by automatically added to the mainModule as an internal module:
var projectModules ={
  externalModules : [
     'i18nModule'],
  internalModules : [
     'componentModule'],
  get: function(){
     'use strict';
     return this.externalModules.concat(this.internalModules);
  }
};

